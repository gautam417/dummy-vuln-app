openapi: 3.0.0
info:
  title: Scan Result API
  description: |
    API for retrieval and storage of Scan Results
  version: 1.0.0

security:
  - apiToken: []

paths:
  /api/scanning/scanresult/v1/status:
    get:
      summary: Scan Result API status
      description: Get the status of the Scan Result API
      tags:
        - Scanning v2
      responses:
        200:
          description: The service is available.
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          $ref: "#/components/responses/notFound"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"
  /api/scanning/scanresult/v1/results:
    get:
      summary: Get a list of Scan Results
      description: |
        Retrieves the list of Scan Results that match a filter given a specified
        cursor.
      tags:
        - Scanning v2
      parameters:
        - $ref: "#/components/parameters/cursor"
        - in: query
          name: filter
          description: |
            Query language expression for filtering results. It is a subset of
            the full metrics query language used in monitoring.

            Operators:
            - `and`, `or` and `not` logical operators (i.e. freeText = "redis"`)
            - `=`, `!=`, `>`, `>=`, `<` and `<=` comparison operators (i.e.
            `freeText = "redis"`)
            - `in` to check inclusion in a list of values (i.e. `pid in (1, 2)`
            or `freeText in ("quay.io/sysdig/agent-slim", "golang:latest", "docker.io/nginx")`)

            This query language does not support the full set of metrics supported
            in the monitor query language, but instead supports a set of fields
            proper to each Scan Result type.

            The list of supported fields is:
            - `freeText` as string value (note that it will search on both the
            image name and image ID)
          schema:
            type: string
            example: freeText="redis"
        - in: query
          name: limit
          description: Limit the number of Scan Results to return.
          schema:
            type: integer
            example: 50
            minimum: 1
            maximum: 999
            default: 20
      responses:
        200:
          description: Returns an array containing the list of Scan Results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scanResults"
        401:
          $ref: "#/components/responses/unauthorized"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"
  /api/scanning/scanresult/v1/results/{resultId}:
    get:
      summary: Get Scan Result
      description: Retrieves the Scan Result with the given `resultId`
      tags:
        - Scanning v2
      parameters:
        - in: path
          name: resultId
          description: The Scan Result ID
          schema:
            type: string
          required: true
      responses:
        200:
          description: Returns the Scan Result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scanResult"
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          $ref: "#/components/responses/notFound"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"
  /api/scanning/scanresult/v1/results/{resultId}/vulnPkgs:
    get:
      summary: Get scan res vuln&pkg pairs
      description: |
        Retrieves the pairs of vulnerability & package of a Scan Result with the
        given `resultId`
      tags:
        - Scanning v2
      parameters:
        - in: path
          name: resultId
          description: The Scan Result ID
          schema:
            type: string
          required: true
        - in: query
          name: filter
          description: |
            Query language expression for filtering results. It is a subset of
            the full metrics query language used in monitoring.

            Operators:
            - `and`, `or` and `not` logical operators (i.e. `pkgType = "os"
            and freeText = "coreutils"`)
            - `=`, `!=`, `>`, `>=`, `<` and `<=` comparison operators (i.e.
            `freeText = "CVE-2020-8908"`)
            - `in` to check inclusion in a list of values (i.e. `severity in (1, 2)`
            or `freeText in ("npm", "java")`)

            This query language does not support the full set of metrics supported
            in the monitor query language, but instead supports a set of fields
            proper to each Scan Result type.

            The list of supported fields is:
            - `pkgType` as string value
            - `vulnHasFix` as bool value
            - `vulnIsExploitable` as bool value
            - `severity` as numeric value in the `[0, 7]` range
            - `minCvssScore` as numeric value
            - `freeText` as string value (note that it will search on the vuln
            name, package & version, fix version and type)
          schema:
            type: string
            example: freeText="npm"
        - in: query
          name: limit
          description: |
            Limit the number of pairs of vulnerability & package to return.
          schema:
            type: integer
            example: 50
            minimum: 1
            maximum: 999
            default: 20
        - in: query
          name: offset
          description: |
            Offset count where to start returning pairs of vulnerability & package.
          schema:
            type: integer
            example: 200
            minimum: 0
        - in: query
          name: sort
          description: |
            Field used to sort pairs of vulnerability & package to return. Order
            is given by the `order` query param.
          schema:
            type: string
            enum:
              - vulnName
              - vulnSeverity
              - vulnCVSSScore
              - pkgName
              - pkgType
              - vulnPublishedAt
            default: vulnSeverity
        - in: query
          name: order
          description: |
            Field used to order pairs of vulnerability & package to return. Sort
            field is given by the `sort` query param.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        200:
          description: |
            Returns the pairs of vulnerability & package of the Scan Result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scanResultVulnPkgs"
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          $ref: "#/components/responses/notFound"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"
  /api/scanning/scanresult/v1/results/{resultId}/vulnPkgs/{vulnPkgId}:
    get:
      summary: Get scan res vuln&pkg pair by ID
      description: |
        Retrieves the vulnerability & package pair identified by `vulnPkgId`
        that belongs to the Scan Result with the given `resultId`
      tags:
        - Scanning v2
      parameters:
        - in: path
          name: resultId
          description: The Scan Result ID
          schema:
            type: string
          required: true
        - in: path
          name: vulnPkgId
          description: |
            The identifier of the vulnerability & package pair for this Scan
            Result
          schema:
            type: string
          required: true
      responses:
        200:
          description: |
            Returns the vulnerability & package pair with the given `vulnPkgId`
            for the Scan Result with the given `resultId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vulnAndPackage"
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          $ref: "#/components/responses/notFound"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"
  /api/scanning/scanresult/v1/results/{resultId}/packages:
    get:
      summary: Get scan res packages
      description: |
        Retrieves the packages of a Scan Result with the given `resultId`
      tags:
        - Scanning v2
      parameters:
        - in: path
          name: resultId
          description: The Scan Result ID
          schema:
            type: string
          required: true
        - in: query
          name: filter
          description: |
            Query language expression for filtering results. It is a subset of
            the full metrics query language used in monitoring.

            Operators:
            - `and`, `or` and `not` logical operators (i.e. `pkgType = "os"
            and freeText = "openssh"`)
            - `=`, `!=`, `>`, `>=`, `<` and `<=` comparison operators (i.e.
            `freeText = "openssh"`)
            - `in` to check inclusion in a list of values (i.e. `pid in (1, 2)`
            or `freeText in ("npm", "java")`)

            This query language does not support the full set of metrics supported
            in the monitor query language, but instead supports a set of fields
            proper to each Scan Result type.

            The list of supported fields is:
            - `pkgType` as string value
            - `pkgName` as string value
            - `pkgVersion` as string value
            - `pkgLicense` as string value
            - `pkgHasVulns` as bool value
            - `pkgHasExploitableVulns` as bool value
            - `freeText` as string value (note that it will search on the package
            name, package type and license)
          schema:
            type: string
            example: freeText="npm"
        - in: query
          name: limit
          description: |
            Limit the number of packages to return.
          schema:
            type: integer
            example: 50
            minimum: 1
            maximum: 999
            default: 20
        - in: query
          name: offset
          description: |
            Offset count where to start returning packages.
          schema:
            type: integer
            example: 200
            minimum: 0
        - in: query
          name: sort
          description: |
            Field used to sort packages to return. Order is given by the `order`
            query param.
          schema:
            type: string
            enum:
              - pkgName
              - pkgType
              - pkgLicense
              - pkgVulnsBySev
            default: pkgName
        - in: query
          name: order
          description: |
            Field used to order packages to return. Sort field is given by the
            `sort` query param.
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        200:
          description: |
            Returns the packages of the Scan Result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scanResultPackages"
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          $ref: "#/components/responses/notFound"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"
  /api/scanning/scanresult/v1/results/{resultId}/packages/{packageId}:
    get:
      summary: Get scan res package by ID
      description: |
        Retrieves the package identified by `packageId` that belongs to the Scan
        Result with the given `resultId`
      tags:
        - Scanning v2
      parameters:
        - in: path
          name: resultId
          description: The Scan Result ID
          schema:
            type: string
          required: true
        - in: path
          name: packageId
          description: |
            The identifier of the package for this Scan Result
          schema:
            type: string
          required: true
      responses:
        200:
          description: |
            Returns the package with the given `packageId` for the Scan Result
            with the given `resultId`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scanResultPackageWithVulns"
        401:
          $ref: "#/components/responses/unauthorized"
        404:
          $ref: "#/components/responses/notFound"
        500:
          $ref: "#/components/responses/internalError"
        503:
          $ref: "#/components/responses/serviceUnavailable"

components:
  parameters:
    cursor:
      name: cursor
      description: >
        Cursor is a string used to retrieve data given a specific context. The
        context can either be resources before a certain one or after.
      in: query
      required: false
      schema:
        type: string
        example: LTltNGUybXIwdWkzZThhMjE1bjRn

  responses:
    unprocessableEntity:
      description: |
        Unprocessable Entity. The client should not repeat this request without
        modification.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorMessage"
    internalError:
      description: Internal error processing the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorMessage"
    serviceUnavailable:
      description: The service is unavailable.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorMessage"
    notFound:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorMessage"
    unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorMessage"
    badRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorMessage"

  schemas:
    errorMessage:
      type: object
      properties:
        message:
          type: string
          description: A human-readable representation of the error.
    vulnsBySev:
      type: array
      description: |
        Count of vulnerabilities, where the index
        represents the severity.
      minItems: 8
      maxItems: 8
      items:
        type: integer
        minimum: 0
        description: Total count of vulns with this severity.
    detailedVulnsBySev:
      type: array
      description: |
        Count of vulnerabilities splitted by total and fixable, where the index
        represents the severity.
      minItems: 8
      maxItems: 8
      items:
        type: object
        required:
          - totalCount
          - fixableCount
        properties:
          totalCount:
            type: integer
            minimum: 0
            description: Total count of vulns with this severity.
          fixableCount:
            type: integer
            minimum: 0
            description: Count of fixable vulns with this severity.
    severity:
      type: integer
      description: Severity of the vulnerability.
      minimum: 0
      maximum: 7
      example: 4
    reporter:
      type: object
      description: Reporter of the CVSS score info or the severity.
      required:
        - name
      properties:
        name:
          type: string
          example: National Vulnerability Database
        url:
          type: string
          nullable: true
          example: "https://nvd.nist.gov/vuln/detail/CVE-2018-6485"
    cvss:
      type: object
      description: Common Vulnerability Scoring System
      required:
        - version
        - score
        - vector
      properties:
        version:
          type: string
          description: CVSS version.
          example: "3.1"
        score:
          type: number
          format: float
          description: CVSS score.
          minimum: 0.0
          maximum: 10.0
          example: 9.8
        vector:
          type: string
          description: |
            Compressed textual representation of the values used
            to derive the score.
          example: "AV:N/AC:L/Au:S/C:P/I:P/A:N"
    packageSummary:
      type: object
      description: Package metadata
      required:
        - id
        - type
        - name
        - version
      properties:
        id:
          type: string
          description: Package identifier.
        type:
          type: string
          description: Package type.
          example: os
        name:
          type: string
          description: Package name.
          example: coreutils
        version:
          type: string
          description: Package version.
          example: "1.2.3"
    scanResults:
      title: Scan Results
      type: object
      required:
        - type
        - page
        - data
      properties:
        type:
          type: string
          description: |
            Type of the scanned resource. **Note:** this acts as `discriminator`
            for the type of the `data` object.
          # `discriminator` is broken on Redoc, so we're forced to express it
          # via the description. See
          # https://github.com/Redocly/redoc/issues/1076
          # https://github.com/Redocly/redoc/issues/862
          enum:
            - dockerImage
        page:
          type: object
          description: |
            Page details providing cursors to fetch Scan Results before of after
            the returned Scan Results.
          required:
            - returned
            - matched
          properties:
            returned:
              type: integer
              description: |
                The number of Scan Results returned. This number is always less or
                equal the limit specified in the request.
              example: 10
              minimum: 0
            matched:
              type: integer
              description: The total number of Scan Results which match the provided filters.
              example: 123
              minimum: 0
            total:
              type: integer
              description: The total number of Scan Results stored.
              example: 5000
              minimum: 0
            next:
              type: string
              nullable: true
              description: |
                The cursor that can be used to fetch a set of Scan Results after
                the last Scan Result returned in the `data` array.
                If this value is unset, then there are no Scan Results after the
                last Scan Result returned in the `data` array.
              example: KzltNGUybXIwdWkzZThhMjE1bjRn
        data:
          description: |
            The actual Scan Results. **Note:**  the `discriminator` for the
            type of the `data` object is the `type` property at the root level
            of this object.
          # `discriminator` is broken on Redoc, so we're forced to express it
          # via the description. See
          # https://github.com/Redocly/redoc/issues/1076
          # https://github.com/Redocly/redoc/issues/862
          oneOf:
            - type: array
              title: Docker Images
              items:
                type: object
                required:
                  - id
                  - storedAt
                  - imageId
                  - imagePullString
                  - vulnsBySev
                properties:
                  id:
                    type: string
                    description: The Scan Result ID
                  storedAt:
                    type: string
                    format: date-time
                    description: |
                      Timestamp the Scan Result has been stored on the backend.
                    example: "2020-04-21T16:08:08.845336507Z"
                  imageId:
                    type: string
                    description: The docker image ID.
                  imagePullString:
                    type: string
                    description: Name and tag of the docker image.
                    example: "quay.io/sysdig/agent-slim:latest"
                  vulnsBySev:
                    $ref: "#/components/schemas/vulnsBySev"
    dockerImageMetadata:
      title: Docker Image Metadata
      type: object
      required:
        - imageId
        - pullString
        - baseOS
        - digest
        - createdAt
        - author
        - size
        - os
        - architecture
        - labels
        - layersCount
        - origin
      properties:
        imageId:
          type: string
          description: The docker image ID
        pullString:
          type: string
          description: Name and tag of the docker image.
          example: "quay.io/sysdig/agent-slim:latest"
        baseOS:
          type: string
          description: OS of the base docker image
          example: Debian 9.1
        digest:
          type: string
          description: Digest of the docker image.
          example: "sha256:e522368ba504005b4f294333b639b029ef563fe9a11a3d893f99f256612a3a76"
        createdAt:
          type: string
          format: date-time
          description: |
            Timestamp the image has been created as returned by `docker inspect`.
          example: "2020-04-21T16:08:08.845336507Z"
        author:
          type: string
          description: Tag of the docker image.
          example: John Smith
        size:
          type: integer
          description: Size (in bytes) of the docker image.
          example: 20474288
          minimum: 0
        os:
          type: string
          description: OS of the docker image.
          example: linux
        architecture:
          type: string
          description: Architecture of the docker image.
          example: amd64
        labels:
          type: object
          description: Labels of the docker image
          additionalProperties:
            type: string
          example:
            com.example.vendor: ACME Incorporated
            version: "1.0"
        layersCount:
          type: integer
          description: Number of layers of the docker image.
          example: 9
          minimum: 1
        origin:
          type: string
          description: todo
    scanResult:
      title: Scan Result
      type: object
      required:
        - id
        - storedAt
        - type
        - metadata
        - vulnsBySev
        - fixablePackages
      properties:
        id:
          type: string
          description: The Scan Result ID
        storedAt:
          type: string
          format: date-time
          description: |
            Timestamp the Scan Result has been stored on the backend.
          example: "2020-04-21T16:08:08.845336507Z"
        type:
          type: string
          description: |
            Type of the scanned resource. **Note:** this acts as `discriminator`
            for the type of the `metadata` object.
          enum:
            - dockerImage
          # `discriminator` is broken on Redoc, so we're forced to express it
          # via the description. See
          # https://github.com/Redocly/redoc/issues/1076
          # https://github.com/Redocly/redoc/issues/862
        metadata:
          description: |
            The metadata for this scanned resource. They depend on the type of
            the scanned resource. **Note:**  the `discriminator` for the
            type of the `metadata` object is the `type` property at the root
            level of this object.
          oneOf:
            - $ref: "#/components/schemas/dockerImageMetadata"
        vulnsBySev:
          $ref: "#/components/schemas/detailedVulnsBySev"
        fixablePackages:
          type: array
          description: List of the most vulnerable packages with a fixable version
          items:
            allOf:
              - $ref: "#/components/schemas/packageSummary"
              - type: object
                required:
                  - exploit
                  - vulnsBySev
                  - suggestedFix
                properties:
                  exploit:
                    type: object
                    description: todo
                  vulnsBySev:
                    $ref: "#/components/schemas/vulnsBySev"
                  suggestedFix:
                    type: string
                    description: Suggested version to fix the vulnerabilities
    scanResultVulnPkgs:
      type: object
      description: Pairs of vulnerability & package of a scan result.
      required:
        - page
        - data
      properties:
        page:
          type: object
          description: |
            Page details providing count of returned pairs of vulnerability & package
            total count of available pairs.
          required:
            - returned
            - matched
          properties:
            returned:
              type: integer
              description: |
                The number of pairs of vulnerability & package returned. This
                number is always less or equal the limit specified in the request.
              example: 10
              minimum: 0
            offset:
              type: integer
              description: |
                The offset count where the returned pairs of vulnerability & package started.
                When specified, this number is equal to the offset specified in the request.
              example: 200
              minimum: 0
            matched:
              type: integer
              description: |
                Total count of pairs of vulnerability & package that match the filters.
              example: 120
              minimum: 0
        data:
          type: array
          description: Pairs of vulnerability & package.
          items:
            type: object
            properties:
              id:
                type: string
                description: Identifier of the pair of vulnerability & package.
              vuln:
                type: object
                description: Vulnerability metadata
                required:
                  - name
                  - severity
                  - cvssVersion
                  - cvssScore
                  - exploit
                  - publishedAt
                properties:
                  name:
                    type: string
                    description: Vulnerability name.
                    example: CVE-2012-1516
                  severity:
                    $ref: "#/components/schemas/severity"
                  cvssVersion:
                    type: string
                    description: CVSS version.
                    example: "3.1"
                  cvssScore:
                    type: number
                    format: float
                    description: CVSS score.
                    minimum: 0.0
                    maximum: 10.0
                    example: 9.8
                  exploit:
                    type: object
                    description: todo
                  publishedAt:
                    type: string
                    format: date-time
                    description: |
                      Timestamp the vulnerability has been published.
                    example: "2020-04-21T16:08:08.845336507Z"
              package:
                $ref: "#/components/schemas/packageSummary"
              fixedInVersion:
                type: array
                nullable: true
                description: |
                  Versions of the package in which the vulnerability has been fixed.
                items:
                  type: string
                example:
                  - "1.2.10"
                  - "1.3.5"
                  - "1.4.1"
    vulnAndPackage:
      type: object
      description: |
        Single pair of vulnerability & package of a specific scan result.
      required:
        - id
        - vuln
        - package
        - fixedInVersion
      properties:
        id:
          type: string
          description: Identifier of the pair of vulnerability & package.
        vuln:
          type: object
          description: Vulnerability metadata
          required:
            - name
            - severity
            - cvssScore
            - exploit
            - description
            - publishedAt
          properties:
            name:
              type: string
              description: Vulnerability name.
              example: CVE-2012-1516
            severity:
              type: object
              description: Severity of the vulnerability and reporter who assigned the severity
              required:
                - value
                - reporter
              properties:
                value:
                  $ref: "#/components/schemas/severity"
                reporter:
                  $ref: "#/components/schemas/reporter"
            cvssScore:
              type: object
              description: CVSS score assigned to the vulnerability.
              required:
                - value
                - reporter
              properties:
                value:
                  $ref: "#/components/schemas/cvss"
                reporter:
                  $ref: "#/components/schemas/reporter"
            additionalCVSSScores:
              type: array
              description: list of additional CVSS scores assigned to the vulnerability.
              items:
                type: object
                required:
                  - value
                  - reporter
                properties:
                  value:
                    $ref: "#/components/schemas/cvss"
                  reporter:
                    $ref: "#/components/schemas/reporter"
            exploit:
              type: object
              description: todo
            description:
              type: string
              description: Description of the vulnerability.
            publishedAt:
              type: string
              format: date-time
              description: |
                Timestamp the vulnerability has been published.
              example: "2020-04-21T16:08:08.845336507Z"
            fixableSince:
              type: string
              format: date-time
              nullable: true
              description: |
                Timestamp a fix for the vulnerability has been published.
              example: "2020-04-21T16:08:08.845336507Z"
            exploitableSince:
              type: string
              format: date-time
              nullable: true
              description: |
                Timestamp an exploit for the vulnerability has been published.
              example: "2020-04-21T16:08:08.845336507Z"
        package:
          allOf:
            - $ref: "#/components/schemas/packageSummary"
            - type: object
              properties:
                path:
                  type: string
                  description: Path where the package is installed.
                  example: "/usr/local/bin/go"
        fixedInVersion:
          type: array
          description: |
            Versions of the package in which the vulnerability has been fixed.
          items:
            type: string
          example:
            - "1.2.10"
            - "1.3.5"
            - "1.4.1"
    scanResultPackages:
      type: object
      description: Packages of a scan result.
      required:
        - page
        - data
      properties:
        page:
          type: object
          description: |
            Page details providing count of returned packages and 
            total count of available packages.
          required:
            - returned
            - matched
          properties:
            returned:
              type: integer
              description: |
                The number of packages returned. This number is always less or
                equal the limit specified in the request.
              example: 10
              minimum: 0
            offset:
              type: integer
              description: |
                The offset count where the returned packages started.
                When specified, this number is equal to the offset specified in the request.
              example: 200
              minimum: 0
            matched:
              type: integer
              description: |
                Total count of packages that match the filters.
              example: 120
              minimum: 0
        data:
          type: array
          description: Collection of packages.
          items:
            $ref: "#/components/schemas/scanResultPackage"
    scanResultPackage:
      allOf:
        - $ref: "#/components/schemas/packageSummary"
        - type: object
          description: Single package of a specific scan result.
          required:
            - license
            - vulnsBySev
            - suggestedFix
          properties:
            license:
              type: string
              nullable: true
              description: Package license.
              example: "BSD 3-Clause"
            path:
              type: string
              nullable: true
              description: Path where the package is installed.
              example: "/usr/local/bin/go"
            vulnsBySev:
              $ref: "#/components/schemas/vulnsBySev"
            suggestedFix:
              type: string
              nullable: true
              description: |
                Suggested version of this package to fix vulns
              example: "1.2.5"
            exploit:
              type: object
              description: todo
    scanResultPackageWithVulns:
      description: |
        Single package of a specific scan result, with some vulns metadata.
      allOf:
        - $ref: "#/components/schemas/scanResultPackage"
        - type: object
          required:
            - vulns
          properties:
            vulns:
              type: array
              description: Vulnerabilities that affect the package.
              items:
                type: object
                description: Vulnerability metadata.
                required:
                  - vulnPkgId
                  - name
                  - severity
                properties:
                  vulnPkgId:
                    type: string
                    description: |
                      The identifier of the vulnerability & package pair for this
                      Scan Result
                  name:
                    type: string
                    description: Vulnerability name.
                    example: CVE-2012-1516
                  severity:
                    $ref: "#/components/schemas/severity"
                  fixableSince:
                    type: string
                    format: date-time
                    nullable: true
                    description: |
                      Timestamp a fix for the vulnerability has been published.
                    example: "2020-04-21T16:08:08.845336507Z"
                  exploitableSince:
                    type: string
                    format: date-time
                    nullable: true
                    description: |
                      Timestamp an exploit for the vulnerability has been
                      published.
                    example: "2020-04-21T16:08:08.845336507Z"
